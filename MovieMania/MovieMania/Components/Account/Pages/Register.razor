@page "/Account/Register"
@inject IAntiforgery Antiforgery

@using Microsoft.AspNetCore.Antiforgery;

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MovieMania.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="container d-flex justify-content-center align-items-center vh-100" style="background-image: url('/images/bg.jpg'); max-width: 1910px; background-position: center;">
    <div class="row bg-black shadow rounded p-4" style="width:25%">
        <div class="col-md-4">
            <section>
                <StatusMessage Message="@Message" />
                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" style="width:350%">
                    <DataAnnotationsValidator />
                    <div href="/" class="brand" style="text-decoration: none; margin-left: 35%;margin-bottom: 10%;">
                        <span style="color:white; font-size:1.5rem;">Movie</span>
                        <span style="color:#0dcaf0; font-size:1rem;">Mania</span>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="email">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label for="password">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label for="confirm-password">Confirm Password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="text" @bind-Value="Input.PhoneNumber" class="form-control" autocomplete="phoneNumber" aria-required="true" placeholder="Phone Number" />
                        <label for="phoneNumber">Phone Number</label>
                        <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstName" aria-required="true" placeholder="First Name" />
                        <label for="firstName">First Name</label>
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastName" aria-required="true" placeholder="Last Name" />
                        <label for="lastName">Last Name</label>
                        <ValidationMessage For="() => Input.LastName" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.Role" class="form-control" autocomplete="role" aria-required="true" placeholder="Role">
                            <option value="" disabled selected>Role</option>
                            <option value="1">Admin</option>
                            <option value="2">User</option>
                        </InputSelect>
                        <label for="role" class="form-label">Role</label>
                        <ValidationMessage For="() => Input.Role" class="text-danger" />
                    </div>
                    <input type="hidden" name="__RequestVerificationToken" value="@Antiforgery.GetAndStoreTokens(HttpContext).RequestToken" />

                    <button type="submit" class="w-100 btn btn-lg btn-primary" style="margin-bottom:4%;">Sign Up</button>
                    <br />
                    <p>
                        <a style="margin-left: 41%;" href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Sign In</a>
                    </p>
                </EditForm>

                @*  <div class="col-md-6 col-md-offset-2">
            <section>
                <h3>Use another service to register.</h3>
                <hr />
                <ExternalLoginPicker />
            </section>
        </div> *@
            </section>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string SelectedRoleName => Input.Role == 1 ? "Admin" : "User"; // Maps Role value to Name

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.PhoneNumber = Input.PhoneNumber;
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.Role = Input.Role;
        user.IsActive = true;
        user.CreatedDateTime = DateTime.Now;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }



    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "PhoneNumber")]
        public string PhoneNumber { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Role is required.")]
        [Display(Name = "Role")]
        public int Role { get; set; }

        public bool IsActive { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedDateTime { get; set; }
        public int? UpdatedBy { get; set; }
        public DateTime? UpdatedDateTime { get; set; }
    }
}
