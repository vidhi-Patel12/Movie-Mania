@page "/Account/Login"
@inject IAntiforgery Antiforgery

@using Microsoft.AspNetCore.Antiforgery;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MovieMania.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="container d-flex justify-content-center align-items-center vh-100" style="background-image: url('/images/bg.jpg'); max-width: 1910px; background-position: center;">
    <div class="row bg-black shadow rounded p-4" style="width:25%">
        <div class="col-md-4">
            <section>
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" style="width:350%">
                    <DataAnnotationsValidator />
                    <div href="/" class="brand" style="text-decoration: none; margin-left: 35%;margin-bottom: 10%;">
                        <span style="color:white; font-size:1.5rem;">Movie</span>
                        <span style="color:#0dcaf0; font-size:1rem;">Mania</span>
                    </div>
                    <input type="hidden" name="__RequestVerificationToken" value="@Antiforgery.GetAndStoreTokens(HttpContext).RequestToken" />

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="name@example.com" />
                        <label for="email" class="form-label text-center">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="checkbox mb-3">
                        <label class="form-label text-white">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                            Remember me
                        </label>
                    </div>
                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary" style="margin-bottom:4%;">Sign in</button>
                    </div>
                    <div>
                        <p>
                            <a href="Account/ForgotPassword" style="margin-left: 32%;">Forgot your password?</a>
                        </p>
                        <p>
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" style="margin-left: 32%;">Register as a new user</a>
                        </p>
                        <p>
                            <a href="Account/ResendEmailConfirmation" style="margin-left: 32%;">Resend email confirmation</a>
                        </p>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }
    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // Attempt to sign in the user
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            var claimsPrincipal = SignInManager.Context.User;
            var userId = claimsPrincipal.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                // Set the cookie with the user ID
                HttpContext.Response.Cookies.Append("UserId", userId, new CookieOptions
                    {
                        HttpOnly = true,
                        Expires = DateTimeOffset.UtcNow.AddDays(7)
                    });
                Console.WriteLine($"User ID stored in cookie: {userId}");
            }

            var user = await SignInManager.UserManager.FindByEmailAsync(Input.Email);

            if (user != null)
            {
                var firstName = user.FirstName; // Assuming FirstName is a property in ApplicationUser
                var phoneNumber = user.PhoneNumber;
                var role = user.Role;

                // Set the cookie with the user ID
                HttpContext.Response.Cookies.Append("UserId", userId, new CookieOptions
                    {
                        HttpOnly = true,
                        Expires = DateTimeOffset.UtcNow.AddDays(7)
                    });
                Console.WriteLine($"User ID stored in cookie: {userId}");

                // Set the cookie with the first name
                HttpContext.Response.Cookies.Append("FirstName", firstName ?? string.Empty, new CookieOptions
                    {
                        HttpOnly = true,
                        Expires = DateTimeOffset.UtcNow.AddDays(7)
                    });
                Console.WriteLine($"First Name stored in cookie: {firstName}");

                // Set the cookie with the phone number
                HttpContext.Response.Cookies.Append("PhoneNumber", phoneNumber ?? string.Empty, new CookieOptions
                    {
                        HttpOnly = true,
                        Expires = DateTimeOffset.UtcNow.AddDays(7)
                    });
                HttpContext.Response.Cookies.Append("Role", role.ToString(), new CookieOptions
                    {
                        HttpOnly = true,
                        Expires = DateTimeOffset.UtcNow.AddDays(7)
                    });
            }

            Logger.LogInformation("User logged in.");
           
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
